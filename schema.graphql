""""""
directive @auth(add: AuthRule, delete: AuthRule, password: AuthRule, query: AuthRule, update: AuthRule) on INTERFACE | OBJECT

""""""
directive @cacheControl(maxAge: Int!) on QUERY

""""""
directive @cascade(fields: [String]) on FIELD

""""""
directive @custom(dql: String, http: CustomHTTP) on FIELD_DEFINITION

""""""
directive @dgraph(pred: String, type: String) on FIELD_DEFINITION | INTERFACE | OBJECT

""""""
directive @generate(mutation: GenerateMutationParams, query: GenerateQueryParams, subscription: Boolean) on INTERFACE | OBJECT

""""""
directive @hasInverse(field: String!) on FIELD_DEFINITION

""""""
directive @id(interface: Boolean) on FIELD_DEFINITION

""""""
directive @lambda on FIELD_DEFINITION

""""""
directive @lambdaOnMutate(add: Boolean, delete: Boolean, update: Boolean) on INTERFACE | OBJECT

""""""
directive @remote on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | UNION

""""""
directive @remoteResponse(name: String) on FIELD_DEFINITION

""""""
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

""""""
directive @secret(field: String!, pred: String) on INTERFACE | OBJECT

""""""
directive @withSubscription on FIELD_DEFINITION | INTERFACE | OBJECT

""""""
input AddCardInput {
  """"""
  interval: Int

  """"""
  side1: String!

  """"""
  side2: String!
}

""""""
type AddCardPayload {
  """"""
  card(filter: CardFilter, first: Int, offset: Int, order: CardOrder): [Card]

  """"""
  numUids: Int
}

""""""
input AddLessonInput {
  """"""
  cardDeck: [CardRef]

  """"""
  content: String

  """"""
  recordingUrl: String

  """"""
  shortDescription: String!

  """"""
  showSideFirst: cardSide

  """"""
  subject: SubjectRef!

  """"""
  title: String!
}

""""""
type AddLessonPayload {
  """"""
  lesson(filter: LessonFilter, first: Int, offset: Int, order: LessonOrder): [Lesson]

  """"""
  numUids: Int
}

""""""
input AddSubjectInput {
  """"""
  currentLevel: String!

  """"""
  lessons: [LessonRef]

  """"""
  name: String!
}

""""""
type AddSubjectPayload {
  """"""
  numUids: Int

  """"""
  subject(filter: SubjectFilter, first: Int, offset: Int, order: SubjectOrder): [Subject]
}

""""""
input AuthRule {
  """"""
  and: [AuthRule]

  """"""
  not: AuthRule

  """"""
  or: [AuthRule]

  """"""
  rule: String
}

""""""
type Card {
  """"""
  id: ID!

  """"""
  interval: Int

  """"""
  side1: String!

  """"""
  side2: String!
}

""""""
type CardAggregateResult {
  """"""
  count: Int

  """"""
  intervalAvg: Float

  """"""
  intervalMax: Int

  """"""
  intervalMin: Int

  """"""
  intervalSum: Int

  """"""
  side1Max: String

  """"""
  side1Min: String

  """"""
  side2Max: String

  """"""
  side2Min: String
}

""""""
input CardFilter {
  """"""
  and: [CardFilter]

  """"""
  has: [CardHasFilter]

  """"""
  id: [ID!]

  """"""
  not: CardFilter

  """"""
  or: [CardFilter]
}

""""""
enum CardHasFilter {
  """"""
  interval

  """"""
  side1

  """"""
  side2
}

""""""
input CardOrder {
  """"""
  asc: CardOrderable

  """"""
  desc: CardOrderable

  """"""
  then: CardOrder
}

""""""
enum CardOrderable {
  """"""
  interval

  """"""
  side1

  """"""
  side2
}

""""""
input CardPatch {
  """"""
  interval: Int

  """"""
  side1: String

  """"""
  side2: String
}

""""""
input CardRef {
  """"""
  id: ID

  """"""
  interval: Int

  """"""
  side1: String

  """"""
  side2: String
}

""""""
input ContainsFilter {
  """"""
  point: PointRef

  """"""
  polygon: PolygonRef
}

""""""
input CustomHTTP {
  """"""
  body: String

  """"""
  forwardHeaders: [String!]

  """"""
  graphql: String

  """"""
  introspectionHeaders: [String!]

  """"""
  method: HTTPMethod!

  """"""
  mode: Mode

  """"""
  secretHeaders: [String!]

  """"""
  skipIntrospection: Boolean

  """"""
  url: String!
}

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

""""""
input DateTimeFilter {
  """"""
  between: DateTimeRange

  """"""
  eq: DateTime

  """"""
  ge: DateTime

  """"""
  gt: DateTime

  """"""
  in: [DateTime]

  """"""
  le: DateTime

  """"""
  lt: DateTime
}

""""""
input DateTimeRange {
  """"""
  max: DateTime!

  """"""
  min: DateTime!
}

""""""
type DeleteCardPayload {
  """"""
  card(filter: CardFilter, first: Int, offset: Int, order: CardOrder): [Card]

  """"""
  msg: String

  """"""
  numUids: Int
}

""""""
type DeleteLessonPayload {
  """"""
  lesson(filter: LessonFilter, first: Int, offset: Int, order: LessonOrder): [Lesson]

  """"""
  msg: String

  """"""
  numUids: Int
}

""""""
type DeleteSubjectPayload {
  """"""
  msg: String

  """"""
  numUids: Int

  """"""
  subject(filter: SubjectFilter, first: Int, offset: Int, order: SubjectOrder): [Subject]
}

""""""
enum DgraphIndex {
  """"""
  bool

  """"""
  day

  """"""
  exact

  """"""
  float

  """"""
  fulltext

  """"""
  geo

  """"""
  hash

  """"""
  hour

  """"""
  int

  """"""
  int64

  """"""
  month

  """"""
  regexp

  """"""
  term

  """"""
  trigram

  """"""
  year
}

""""""
input FloatFilter {
  """"""
  between: FloatRange

  """"""
  eq: Float

  """"""
  ge: Float

  """"""
  gt: Float

  """"""
  in: [Float]

  """"""
  le: Float

  """"""
  lt: Float
}

""""""
input FloatRange {
  """"""
  max: Float!

  """"""
  min: Float!
}

""""""
input GenerateMutationParams {
  """"""
  add: Boolean

  """"""
  delete: Boolean

  """"""
  update: Boolean
}

""""""
input GenerateQueryParams {
  """"""
  aggregate: Boolean

  """"""
  get: Boolean

  """"""
  password: Boolean

  """"""
  query: Boolean
}

""""""
enum HTTPMethod {
  """"""
  DELETE

  """"""
  GET

  """"""
  PATCH

  """"""
  POST

  """"""
  PUT
}

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

""""""
input Int64Filter {
  """"""
  between: Int64Range

  """"""
  eq: Int64

  """"""
  ge: Int64

  """"""
  gt: Int64

  """"""
  in: [Int64]

  """"""
  le: Int64

  """"""
  lt: Int64
}

""""""
input Int64Range {
  """"""
  max: Int64!

  """"""
  min: Int64!
}

""""""
input IntFilter {
  """"""
  between: IntRange

  """"""
  eq: Int

  """"""
  ge: Int

  """"""
  gt: Int

  """"""
  in: [Int]

  """"""
  le: Int

  """"""
  lt: Int
}

""""""
input IntRange {
  """"""
  max: Int!

  """"""
  min: Int!
}

""""""
input IntersectsFilter {
  """"""
  multiPolygon: MultiPolygonRef

  """"""
  polygon: PolygonRef
}

""""""
type Lesson {
  """"""
  cardDeck(filter: CardFilter, first: Int, offset: Int, order: CardOrder): [Card]

  """"""
  cardDeckAggregate(filter: CardFilter): CardAggregateResult

  """"""
  content: String

  """"""
  id: ID!

  """"""
  recordingUrl: String

  """"""
  shortDescription: String!

  """"""
  showSideFirst: cardSide

  """"""
  subject(filter: SubjectFilter): Subject!

  """"""
  title: String!
}

""""""
type LessonAggregateResult {
  """"""
  contentMax: String

  """"""
  contentMin: String

  """"""
  count: Int

  """"""
  recordingUrlMax: String

  """"""
  recordingUrlMin: String

  """"""
  shortDescriptionMax: String

  """"""
  shortDescriptionMin: String

  """"""
  titleMax: String

  """"""
  titleMin: String
}

""""""
input LessonFilter {
  """"""
  and: [LessonFilter]

  """"""
  has: [LessonHasFilter]

  """"""
  id: [ID!]

  """"""
  not: LessonFilter

  """"""
  or: [LessonFilter]
}

""""""
enum LessonHasFilter {
  """"""
  cardDeck

  """"""
  content

  """"""
  recordingUrl

  """"""
  shortDescription

  """"""
  showSideFirst

  """"""
  subject

  """"""
  title
}

""""""
input LessonOrder {
  """"""
  asc: LessonOrderable

  """"""
  desc: LessonOrderable

  """"""
  then: LessonOrder
}

""""""
enum LessonOrderable {
  """"""
  content

  """"""
  recordingUrl

  """"""
  shortDescription

  """"""
  title
}

""""""
input LessonPatch {
  """"""
  cardDeck: [CardRef]

  """"""
  content: String

  """"""
  recordingUrl: String

  """"""
  shortDescription: String

  """"""
  showSideFirst: cardSide

  """"""
  subject: SubjectRef

  """"""
  title: String
}

""""""
input LessonRef {
  """"""
  cardDeck: [CardRef]

  """"""
  content: String

  """"""
  id: ID

  """"""
  recordingUrl: String

  """"""
  shortDescription: String

  """"""
  showSideFirst: cardSide

  """"""
  subject: SubjectRef

  """"""
  title: String
}

""""""
enum Mode {
  """"""
  BATCH

  """"""
  SINGLE
}

""""""
type MultiPolygon {
  """"""
  polygons: [Polygon!]!
}

""""""
input MultiPolygonRef {
  """"""
  polygons: [PolygonRef!]!
}

""""""
type Mutation {
  """"""
  addCard(input: [AddCardInput!]!): AddCardPayload

  """"""
  addLesson(input: [AddLessonInput!]!): AddLessonPayload

  """"""
  addSubject(input: [AddSubjectInput!]!): AddSubjectPayload

  """"""
  deleteCard(filter: CardFilter!): DeleteCardPayload

  """"""
  deleteLesson(filter: LessonFilter!): DeleteLessonPayload

  """"""
  deleteSubject(filter: SubjectFilter!): DeleteSubjectPayload

  """"""
  updateCard(input: UpdateCardInput!): UpdateCardPayload

  """"""
  updateLesson(input: UpdateLessonInput!): UpdateLessonPayload

  """"""
  updateSubject(input: UpdateSubjectInput!): UpdateSubjectPayload
}

""""""
input NearFilter {
  """"""
  coordinate: PointRef!

  """"""
  distance: Float!
}

""""""
type Point {
  """"""
  latitude: Float!

  """"""
  longitude: Float!
}

""""""
input PointGeoFilter {
  """"""
  near: NearFilter

  """"""
  within: WithinFilter
}

""""""
type PointList {
  """"""
  points: [Point!]!
}

""""""
input PointListRef {
  """"""
  points: [PointRef!]!
}

""""""
input PointRef {
  """"""
  latitude: Float!

  """"""
  longitude: Float!
}

""""""
type Polygon {
  """"""
  coordinates: [PointList!]!
}

""""""
input PolygonGeoFilter {
  """"""
  contains: ContainsFilter

  """"""
  intersects: IntersectsFilter

  """"""
  near: NearFilter

  """"""
  within: WithinFilter
}

""""""
input PolygonRef {
  """"""
  coordinates: [PointListRef!]!
}

""""""
type Query {
  """"""
  aggregateCard(filter: CardFilter): CardAggregateResult

  """"""
  aggregateLesson(filter: LessonFilter): LessonAggregateResult

  """"""
  aggregateSubject(filter: SubjectFilter): SubjectAggregateResult

  """"""
  getCard(id: ID!): Card

  """"""
  getLesson(id: ID!): Lesson

  """"""
  getSubject(id: ID!): Subject

  """"""
  queryCard(filter: CardFilter, first: Int, offset: Int, order: CardOrder): [Card]

  """"""
  queryLesson(filter: LessonFilter, first: Int, offset: Int, order: LessonOrder): [Lesson]

  """"""
  querySubject(filter: SubjectFilter, first: Int, offset: Int, order: SubjectOrder): [Subject]
}

""""""
input StringExactFilter {
  """"""
  between: StringRange

  """"""
  eq: String

  """"""
  ge: String

  """"""
  gt: String

  """"""
  in: [String]

  """"""
  le: String

  """"""
  lt: String
}

""""""
input StringFullTextFilter {
  """"""
  alloftext: String

  """"""
  anyoftext: String
}

""""""
input StringHashFilter {
  """"""
  eq: String

  """"""
  in: [String]
}

""""""
input StringRange {
  """"""
  max: String!

  """"""
  min: String!
}

""""""
input StringRegExpFilter {
  """"""
  regexp: String
}

""""""
input StringTermFilter {
  """"""
  allofterms: String

  """"""
  anyofterms: String
}

""""""
type Subject {
  """"""
  currentLevel: String!

  """"""
  id: ID!

  """"""
  lessons(filter: LessonFilter, first: Int, offset: Int, order: LessonOrder): [Lesson]

  """"""
  lessonsAggregate(filter: LessonFilter): LessonAggregateResult

  """"""
  name: String!
}

""""""
type SubjectAggregateResult {
  """"""
  count: Int

  """"""
  currentLevelMax: String

  """"""
  currentLevelMin: String

  """"""
  nameMax: String

  """"""
  nameMin: String
}

""""""
input SubjectFilter {
  """"""
  and: [SubjectFilter]

  """"""
  has: [SubjectHasFilter]

  """"""
  id: [ID!]

  """"""
  not: SubjectFilter

  """"""
  or: [SubjectFilter]
}

""""""
enum SubjectHasFilter {
  """"""
  currentLevel

  """"""
  lessons

  """"""
  name
}

""""""
input SubjectOrder {
  """"""
  asc: SubjectOrderable

  """"""
  desc: SubjectOrderable

  """"""
  then: SubjectOrder
}

""""""
enum SubjectOrderable {
  """"""
  currentLevel

  """"""
  name
}

""""""
input SubjectPatch {
  """"""
  currentLevel: String

  """"""
  lessons: [LessonRef]

  """"""
  name: String
}

""""""
input SubjectRef {
  """"""
  currentLevel: String

  """"""
  id: ID

  """"""
  lessons: [LessonRef]

  """"""
  name: String
}

""""""
input UpdateCardInput {
  """"""
  filter: CardFilter!

  """"""
  remove: CardPatch

  """"""
  set: CardPatch
}

""""""
type UpdateCardPayload {
  """"""
  card(filter: CardFilter, first: Int, offset: Int, order: CardOrder): [Card]

  """"""
  numUids: Int
}

""""""
input UpdateLessonInput {
  """"""
  filter: LessonFilter!

  """"""
  remove: LessonPatch

  """"""
  set: LessonPatch
}

""""""
type UpdateLessonPayload {
  """"""
  lesson(filter: LessonFilter, first: Int, offset: Int, order: LessonOrder): [Lesson]

  """"""
  numUids: Int
}

""""""
input UpdateSubjectInput {
  """"""
  filter: SubjectFilter!

  """"""
  remove: SubjectPatch

  """"""
  set: SubjectPatch
}

""""""
type UpdateSubjectPayload {
  """"""
  numUids: Int

  """"""
  subject(filter: SubjectFilter, first: Int, offset: Int, order: SubjectOrder): [Subject]
}

""""""
input WithinFilter {
  """"""
  polygon: PolygonRef!
}

""""""
enum cardSide {
  """"""
  SIDE1

  """"""
  SIDE2
}
